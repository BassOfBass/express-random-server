/* Generic rules */
// only rules applying to base tags and their pseudo-selectors/elements go there

:root {
  
  // hue
  --hslh1: 0;
  --hslh2: calc(var(--hslh1) + 60);
  --hslh3: calc(var(--hslh2) + 60);
  --hslh4: calc(var(--hslh3) + 60);
  --hslh5: calc(var(--hslh4) + 60);
  --hslh6: calc(var(--hslh5) + 60);

  // saturation
  --hsls: 50%;
  --hsls-rich: 75%;
  --hsls-poor: 35%;

  // lightness
  --hsll: 50%;
  --hsll-light: 75%;
  --hsll-dark: 35%;

  // opacity
  --hslo: 100%;
  --hslo-beta: 80%;

  /* Actual colours */

  // relatively black and white to not go full meme with variable colours
  --primary-colour0:hsl(0, 0%, 15%);
  --secondary-colour0: hsl(0, 0%, 85%);

  --primary-color1: 
    hsla(
      var(--hslh1), 
      var(--hsls), 
      var(--hsll),
      var(--hslo)
    );
  --secondary-color1:
    hsla(
      calc(var(--hslh1) + 30),
      var(--hsls-poor),
      var(--hsll),
      var(--hslo),
    );
  --tertiary-color1:
    hsla(
      calc(var(--hslh1) - 15),
      var(--hsls),
      var(--hsll),
      var(--hslo),
    );
  --primary-color2: 
    hsla(
      var(--hslh2), 
      var(--hsls), 
      var(--hsll),
      var(--hslo)
    );
  --primary-color3: 
    hsla(
      var(--hslh3), 
      var(--hsls), 
      var(--hsll),
      var(--hslo)
    );
  --primary-color4: 
    hsla(
      var(--hslh4), 
      var(--hsls), 
      var(--hsll),
      var(--hslo)
    );
  --primary-color5: 
    hsla(
      var(--hslh5), 
      var(--hsls), 
      var(--hsll),
      var(--hslo)
    );
  --primary-color6: 
    hsla(
      var(--hslh6), 
      var(--hsls), 
      var(--hsll),
      var(--hslo)
    );
  // TODO: rework into more granular scheme
  // links
  --base-anchor-colour: 120;
  --primary-anchor-colour: hsl(120, 80%, 40%);
  --secondary-anchor-colour: hsl(120, 100%, 95%);
  // local links
  --base-local-anchor-colour: 270;
  --primary-local-anchor-colour: hsl(270, 80%, 50%);
  --secondary-local-anchor-colour: hsl(270, 100%, 95%);

  // widths
  --mobile-width: 360px;
  --tablet-width: 720px;
  --desktop-width: 1080px;

  // durations for transition and transform properties
  --global-duration: 0.5s;
  --duration-none: 0;
  --duration-fast: 0.25s;
  --duration-norm: 0.5s;
  --duration-slow: 1s;
}

// Set base font and the box sizing property 
html {
  // prep fpr sticky footer
  height: 100%;
  // Sets font size property which then becomes a basis for "rem" units 
  font: 16px Helvetica, Arial, sans-serif;
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

// Inherit box sizing from base to everything else 
*, 
*::before, 
*::after {
  box-sizing: inherit;
}

body {
  position: relative;
  display: flex;
  flex-flow: column nowrap;
  min-height: 100%;
  color: var(--primary-colour0);
  background: var(--secondary-colour0);
  padding: 0;
  margin: 0;
}

/* Content sectioning */
main {
  flex: 1 1 auto;
  display: flex;
  flex-flow: column nowrap;
  align-items: center;
  max-width: var(--desktop-width);
  margin: 1em auto;
}

// Style semantic tags for older browsers 
article, 
aside, 
footer, 
header, 
nav, 
section {
  display: block;
}

h1 {
  font-size: 2.2rem;
  color: var(--primary-color1);
  // background-color: var(--secondary-color1);
  // border: 2px solid var(--tertiary-color1);
  padding: 0;
  margin: 0;
}

h2 {
  font-size: 2rem;
  color: var(--primary-color2);
  padding: 0;
  margin: 0;
}

h3 {
  font-size: 1.8rem;
  color: var(--primary-color3);
  padding: 0;
  margin: 0;
}

h4 {
  font-size: 1.6rem;
  color: var(--primary-color4);
  padding: 0;
  margin: 0;
}

h5 {
  font-size: 1.4rem;
  color: var(--primary-color5);
  padding: 0;
  margin: 0;
}

h6 {
  font-size: 1.2rem;
  color: var(--primary-color6);
  padding: 0;
  margin: 0;
}
/* END Content sectioning */

/* Text content */



// Set consistent line height across several text elements 
p,
li,
dt,
dd {
  line-height: 1.5;
}

ul, 
ol {
  padding: 0;
  margin: 0;
}

ul {
  list-style: none;
}

li {
  text-align: inherit;
}
/* END Text content */

/* Inline text semantics */

a {
  text-decoration: none;
  outline: none;
  transition: all var(--global-duration);
  padding: 0.25em;

  &:link {
    color: hsl(var(--base-anchor-colour), 80%, 40%);
    text-shadow: 0 0 1px var(--primary-colour0);
  }
  
  /* 
    Only the following styles can be applied to visited links: 
  
    "color"
    "background-color"
    "border-color" (and its sub-properties)
    "column-rule-color"
    "outline-color"
    The color parts of the "fill" and "stroke" attributes
  
    In addition, even for the above styles, you won't be able to change the transparency between unvisited and visited links, as you otherwise would be able to using rgba(), hsla(), or the transparent keyword.
  */
  &:visited {
    color: hsl(var(--base-anchor-colour), 60%, 30%);
  }
  
  &:focus,
  &:hover {
    color: hsl(var(--base-anchor-colour), 90%, 40%);
    background-color: hsl(var(--base-anchor-colour), 100%, 95%);
    /* 
      border-bottom has better styling options than than text-decoration 
      no color specified means it will adopt font color
    */
    border-bottom: 1px solid;
    cursor: pointer;
  }
  
  &:active {
    color: hsl(var(--base-anchor-colour), 100%, 95%);
    background-color: hsl(var(--base-anchor-colour), 90%, 40%);
  }
}


// abbr {}
// dfn {}
// b {}

/* Not supported in Safari and IE */
// bdi {}
// bdo {}

// br {}
// code {}
// cite {}

/* Not supported in IE */
// data {}

/* 
  Can be nested, with each level of nesting indicating a greater degree of emphasis. 
*/
// em {}
// i {}

/* 
  May be nested in various combinations with the <samp> (Sample Output) element to represent various forms of input or output based on visual cues. 
*/
// kbd {}

// mark {}
// q {}
// ruby {}
// rt {}
// rb {}
// rp {}

/* Only supported in Firefox */
// rtc {}

// rbc {}
// s {}
// samp {}
// small {}
// span {}
// strong {}
// sub {}
// sup {}

/* 
  If the element does not have a datetime attribute, it must not have any element descendants, and the datetime value is the element’s child text content. 
*/
/* Not supported by Internet Explorer */
// time {}

u {
  text-decoration: #f00 wavy underline;
}

/* Not supported in IE 7+ */
// wbr {}

/* Demarcating edits */
// del {}
// ins {}
/* END Demarcating edits */

/* END Inline text semantics */

/* Image and multimedia */
/* END Image and multimedia */

/* Embedded content */
/* END Embedded content */

/* Scripting */
/* END Scripting */

/* Table content */

table {
  border-collapse: collapse;
}

th, 
td {
  padding: 0.25em;
  text-align: start;
}
/* END Table content */

/* Forms */
button, 
input, 
select, 
textarea { 
  /* 
    Interactive elements such as form input should provide an area large enough that it is easy to activate them. This helps a variety of people, including people with motor control issues and people using non-precise forms of input such as a stylus or fingers. A minimum interactive size of 44×44 CSS pixels is recommended. 
  */
  min-width: 44px;
  width: 100%;
  max-width: var(--mobile-width);
  min-height: 44px;
  border-radius: 5px;
  padding: 0.5em;
  /* 
    Large amounts of interactive content — including buttons — placed in close visual proximity to each other should have space separating them. This spacing is beneficial for people who are experiencing motor control issues, who may accidentally activate the wrong interactive content. 
  */
  margin: 1em 0;
}

form {
  max-width: var(--mobile-width);
  border: 1px solid var(--primary-colour0);
  padding: 1em;
  border-radius: 1em;
}

fieldset {
  margin: 0.5em;
}

legend {
  border: 1px solid;
  padding: 0.5em;
}

label {
  padding: 0.5em;
  cursor: pointer;
}

input {
  /* 
    A property specific to text entry-related elements is the CSS caret-color property, which lets you set the color used to draw the text input caret: 
  */
  caret-color: inherit;
  
  /* 
    Any currently enabled element that can be activated (selected, clicked on, typed into, etc.) or accept focus and also has a disabled state, in which it can't be activated or accept focus. 
  */
  // &:enabled {}

  // Element not editable by the user 
  // &:read-only {}
  
  // Element that is editable by the user. 
  // &:read-write {}
  
  /* 
    Element that is currently displaying placeholder text, including <input> and <textarea> elements with the placeholder attribute present that has, as of yet, no value. 
  */
  // &:placeholder-shown {}
  
  /* 
    Form elements that are the default in a group of related elements. Matches checkbox and radio input types that were checked on page load or render. 
  */
  // &:default {}
  
  /* 
    Matches "checkbox" and "radio" input types that are currently checked (and the <option> in a <select> that is currently selected). 
  */
  // &:checked {}
  
  /* 
    "checkbox" elements whose indeterminate property is set to true by JavaScript, "radio" elements, when all radio buttons with the same name value in the form are unchecked, and <progress> elements in an indeterminate state 
  */
  // &:indeterminate {}
  
  /* 
    Form controls that can have constraint validation applied and are currently valid. 
  */
  // &:valid {}
  
  /* 
    Form controls that have constraint validation applied and are currently not valid. Matches a form control whose value doesn't match the constraints set on it by it's attributes, such as "required", "pattern", "step" and "max". 
  */
  // &:invalid {}
  
  /* 
    A non-empty input whose current value is within the range limits specified by the "min" and "max" attributes and the "step". 
  */
  // &:in-range {}
  
  /* 
    A non-empty input whose current value is NOT within the range limits specified by the "min" and "max" attributes or does not adher to the "step" constraint. 
  */
  // &:out-of-range {}
  
  /* 
    <input>, <select>, or <textarea> element that has the required attribute set on it. Only matches elements that can be required. The attribute included on a non-requirable element will not make for a match. 
  */
  // &:required {}
  
  /* 
    <input>, <select>, or <textarea> element that does NOT have the required attribute set on it. Does not match elements that can't be required. 
  */
  // &:optional {}
  
  /* 
    <input> and <textarea> elements that currently have no value. 
  */
  // &:blank {}
  
  /* 
    Similar to :invalid, but is activated on blur. Matches invalid input but only after the user interaction, such as by focusing on the control, leaving the control, or attempting to submit the form containing the invalid control. 
  */
  // &:user-invalid {}
  
  /* 
    Only the subset of CSS properties that apply to the ::first-line pseudo-element can be used in a rule using ::placeholder in its selector. 
  */
  // &::placeholder {}

  /* 
    Any currently disabled element that has an enabled state, meaing it otherwise could be activated (selected, clicked on, typed into, etc.) or accept focus were it not disabled. 
  */
  // &:disabled {}
}

button {
  color: var(--primary-colour0);
  background-color: var(--secondary-colour0);
  border: 1px solid;
  cursor: pointer;
  
  // &:hover {}
  // &:focus {}
  &:active {
    box-shadow: 
      inset -2px -2px 3px rgba(255, 255, 255, .6),
      inset 2px 2px 3px rgba(0, 0, 0, .6);
  }
}

input:focus,
textarea:focus {
  /* 
    Additional highlight for focused elements 
  */
  border-color: #000;
}

button:disabled,
textarea:disabled,
input:disabled,
select:disabled {
  cursor: not-allowed;
}


/* END Forms */

/* Interactive elements */
/* END Interactive elements */

/* Web components */
/* END Web components */

/* END Generic rules */

/* Attribute rules */
// Only selectors by attribute go there 

// external unprotected link
// a[href*="http"] {}

// external protected link
// a[href*="https"] {}

/* local link */
a[href^="#"] {
  
  // No point for separate visited state
  &:link,
  &:visited {
    color: hsl(var(--base-anchor-colour), 80%, 40%);
  }

  &:focus,
  &:hover {
    color: hsl(var(--base-anchor-colour), 80%, 50%);
    background-color: hsl(var(--base-anchor-colour), 100%, 95%);
  }

  &:active {
    color: hsl(var(--base-anchor-colour), 100%, 95%);
    background-color: hsl(var(--base-anchor-colour), 80%, 50%);
  }
}

/* END local link */

input {

  &[type="checkbox"],
  &[type="radio"] {
    width: auto;
    border: none;
  }

  // &[type="color"] {}
  
  // &[type="date"] {}
  
  // &[type="datetime-local"] {}
  
  // &[type="month"] {}

}


/* 
  Make file input completely transparent due to limited styling, but not hide it for accesibility reasons. Its label gets "fileinput" class and styled as a button instead.
*/
label + input[type="file"] {
  opacity: 0;
}

/* Attribute [class=""] rules */
/* END Attribute [class=""] rules */
/* Attribute [id=""] rules */
/* END Attribute [id=""] rules */
/* END Attribute rules */

/* Class rules */

// skip to main button
.gskip {
  position: absolute;
  left: 50%;
  height: 30px;
  background: #e77e23;
  padding: 0.25em;
  transform: translateY(-100%);
  transition: transform 0.3s;

  &:focus {
    transform: translateY(0%);
  }
}

// global header
.gheader {
  display: flex;
  flex-flow: column nowrap;
  width: 100%;
  font-size: 1.5rem;
  border-bottom: 2px solid var(--primary-colour0);
  padding: 0 1em;

  // top part
  & .gtop {
    display: inline-flex;
    flex-flow: row wrap;
    justify-content: space-around;
    align-items: center;
  }

  // logo link
  & .glogo {
    font-size: 2rem;
    font-weight: bold;
    text-transform: uppercase;
    // shadow so it wouldn't blend with bg colour
    text-shadow: 0 0 2px var(--primary-colour0);
    
    // &:link {}
    // &:visited {}
    // &:focus,
    // &:hover {}
    // &:active {}
  }

  // global search
  & .gsearch {
    display: flex;
    flex-flow: row nowrap;
    border: none;
    padding: 0;
    margin: 0;

    // input container
    & > div:first-child {
      flex: 1 1 auto;
      display: flex;
      flex-flow: row nowrap;
      align-items: center;
    }

    // submit button container
    & > div:last-child {
      flex: 0 0 auto;
    }
  }

  // nav bar
  & .gnav {

    & > ul {
      display: flex;
      flex-flow: row wrap;
      justify-content: space-evenly;
    }
  }
}

// global footer
.gfooter {
  display: flex;
  flex-flow: row wrap;
  justify-content: space-between;
  align-items: center;
  width: 100%;
  border-top: 2px solid var(--primary-colour0);
  padding: 1em;

  // dark/light mode switcher
  & .glightswitch {
    width: auto;
    border-radius: 50%;
    padding: 0.5em;
    margin: 0;
  }
}
/* END Class rules */

/* ID rules */
/* END ID rules */